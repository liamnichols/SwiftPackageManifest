import Foundation
import Difference
import ManifestDescription
import ManifestLoading
import XCTest

extension URL {
    init(_ staticString: StaticString) {
        self.init(string: String(describing: staticString))!
    }
}

class ManifestLoaderTests: XCTestCase {
    var loaders: [ManifestLoader]!

    override func setUp() {
        super.setUp()
        loaders = [
            SyntaxBasedManifestLoader()
        ]
    }

    override func tearDown() {
        super.tearDown()
        loaders = nil
    }

    func testSimpleDescription() throws {
        try assertManifest("""
            // swift-tools-version: 5.4

            import PackageDescription

            let package = Package(
                name: "Foo"
            )
            """,
            Manifest(
                toolsVersion: .v5_4,
                package: Package(name: #"Foo"#)
            )
        )
    }

    func testDescriptionWithTargetsAndDependencies() throws {
        try assertManifest("""
            // swift-tools-version: 5.4
            // Comments should be ignored

            import PackageDescription

            let package = Package(

                // The name of the package
                name: "Foo",
                platforms: [],
                products: [
                    .library(name: "sys", targets: ["sys"])
                ]
                dependencies: [
                    .package(url: "https://example.com/example", "1.2.0"..<"2.0.0")
                ],
                targets: [
                    .target(name: "sys" /*, dependencies: ["libc"]*/),
                    .target(
                        name: "dep",
                        dependencies: ["sys", "libc"]
                    )
                ]
            )
            """,
            Manifest(
                toolsVersion: .v5_4,
                package: Package(
                    name: "Foo",
                    platforms: [],
                    products: [
                        Product(name: "sys", type: .library, targets: ["sys"], settings: [])
                    ],
                    dependencies: [
                        Dependency(url: URL("https://example.com/example"), requirement: .range("1.2.0" ..< "2.0.0"))
                    ],
                    targets: [
                        Target(name: "sys", type: .regular, dependencies: [], path: nil),
                        Target(name: "dep", type: .regular, dependencies: [.byName(name: "sys"), .byName(name: "libc")], path: nil)
                    ]
                )
            )
        )
    }

    func testSwiftPlaygroundsPackage() throws {
        try assertManifest("""
            // swift-tools-version:5.5

            // WARNING:
            // This file is automatically generated.
            // Do not edit it by hand because the contents will be replaced.

            import PackageDescription
            import AppleProductTypes

            let package = Package(
                name: "Dependency Test",
                platforms: [
                    .iOS("15.2")
                ],
                products: [
                    .iOSApplication(
                        name: "Dependency Test",
                        targets: ["AppModule"],
                        bundleIdentifier: "eu.liamnichols.testapp",
                        teamIdentifier: "9WL4772D2M",
                        displayVersion: "1.0",
                        bundleVersion: "1",
                        iconAssetName: "AppIcon",
                        accentColorAssetName: "AccentColor",
                        supportedDeviceFamilies: [
                            .pad,
                            .phone
                        ],
                        supportedInterfaceOrientations: [
                            .portrait,
                            .landscapeRight(),
                            .landscapeLeft,
                            .portraitUpsideDown(.when(deviceFamilies: [.pad]))
                        ],
                        capabilities: [
                            .camera(purposeString: "Need to see the face"),
                            .faceID(purposeString: "To secure your stuff", .when(deviceFamilies: [.pad, .phone])),
                            .localNetwork(
                                purposeString: "Foo",
                                bonjourServiceTypes: ["A", "B", "C"]
                            )
                        ],
                        additionalInfoPlistContentFilePath: nil
                    )
                ],
                dependencies: [
                    .package(url: "https://github.com/alamofire/alamofire", .exact("5.4.3")),
                    .package(url: "https://github.com/techprimate/TPPDF", "2.3.3"..<"3.0.0"),
                    .package(url: "https://github.com/kylef/pathkit", "1.0.1"..<"1.1.0"),
                    .package(url: "https://github.com/JohnSundell/CollectionConcurrencyKit.git", .branch("main")),
                    .package(url: "https://github.com/JohnSundell/Plot.git", .revision("c27f6857deeb4c4623db294172a8ec572790a9be"))
                ],
                targets: [
                    .executableTarget(
                        name: "AppModule",
                        dependencies: [
                            .product(name: "Alamofire", package: "alamofire"),
                            .product(name: "TPPDF", package: "TPPDF"),
                            .product(name: "PathKit", package: "pathkit"),
                            .product(name: "CollectionConcurrencyKit", package: "collectionconcurrencykit"),
                            .product(name: "Plot", package: "plot")
                        ],
                        path: "."
                    )
                ]
            )
            """,
            Manifest(
                toolsVersion: .v5_5,
                package: Package(
                    name: "Dependency Test",
                    platforms: [
                        Platform(name: "iOS", oldestSupportedVersion: .init(value: "15.2"))
                    ],
                    products: [
                        Product(
                            name: "Dependency Test",
                            type: .iOSApplication,
                            targets: ["AppModule"],
                            settings: [
                                .bundleIdentifier("eu.liamnichols.testapp"),
                                .teamIdentifier("9WL4772D2M"),
                                .displayVersion("1.0"),
                                .bundleVersion("1"),
                                .iOSAppInfo(
                                    .init(
                                        iconAssetName: "AppIcon",
                                        accentColorAssetName: "AccentColor",
                                        supportedDeviceFamilies: [
                                            .pad,
                                            .phone
                                        ],
                                        supportedInterfaceOrientations: [
                                            .portrait,
                                            .landscapeRight,
                                            .landscapeLeft,
                                            .portraitUpsideDown(.when(deviceFamilies: [.pad]))
                                        ],
                                        capabilities: [
                                            .camera(purposeString: "Need to see the face"),
                                            .faceID(purposeString: "To secure your stuff", .when(deviceFamilies: [.pad, .phone])),
                                            .localNetwork(purposeString: "Foo", bonjourServiceTypes: ["A", "B", "C"])
                                        ],
                                        additionalInfoPlistContentFilePath: nil
                                    )
                                )
                            ]
                        )
                    ],
                    dependencies: [
                        Dependency(url: URL("https://github.com/alamofire/alamofire"), requirement: .exact("5.4.3")),
                        Dependency(url: URL("https://github.com/techprimate/TPPDF"), requirement: .range("2.3.3" ..< "3.0.0")),
                        Dependency(url: URL("https://github.com/kylef/pathkit"), requirement: .range("1.0.1" ..< "1.1.0")),
                        Dependency(url: URL("https://github.com/JohnSundell/CollectionConcurrencyKit.git"), requirement: .branch("main")),
                        Dependency(
                            url: URL("https://github.com/JohnSundell/Plot.git"),
                            requirement: .revision("c27f6857deeb4c4623db294172a8ec572790a9be")
                        )
                    ],
                    targets: [
                        Target(
                            name: "AppModule",
                            type: .executable,
                            dependencies: [
                                .product(name: "Alamofire", package: "alamofire"),
                                .product(name: "TPPDF", package: "TPPDF"),
                                .product(name: "PathKit", package: "pathkit"),
                                .product(name: "CollectionConcurrencyKit", package: "collectionconcurrencykit"),
                                .product(name: "Plot", package: "plot")
                            ],
                            path: "."
                        )
                    ]
                )
            )
        )
    }

    func testAnotherIOSApp() throws {
        try assertManifest("""
            // swift-tools-version: 5.5

            // WARNING:
            // This file is automatically generated.
            // Do not edit it by hand because the contents will be replaced.

            import PackageDescription
            import AppleProductTypes

            let package = Package(
                name: "iOS App Test",
                products: [
                    .iOSApplication(
                        name: "Dependency Test",
                        targets: ["AppModule"],
                        displayVersion: "1.0",
                        bundleVersion: "1",
                        iconAssetName: "AppIcon",
                        accentColorAssetName: "AccentColor",
                        supportedDeviceFamilies: [
                            .pad,
                            .phone
                        ],
                        supportedInterfaceOrientations: [
                            .portrait,
                            .landscapeRight,
                            .landscapeLeft,
                            .portraitUpsideDown(.when(deviceFamilies: [.pad]))
                        ],
                        capabilities: [
                            .camera(purposeString: "Need to see the face"),
                            .appTransportSecurity(configuration: .init(
                                allowsArbitraryLoadsInWebContent: false,
                                exceptionDomains: [
                                    .init(
                                        domainName: "google.com",
                                        includesSubdomains: true,
                                        exceptionAllowsInsecureHTTPLoads: true
                                    )
                                ],
                                pinnedDomains: [
                                    ProductSetting.IOSAppInfo.AppTransportSecurityConfiguration.PinnedDomain(
                                        domainName: "example.com",
                                        pinnedCAIdentities: [
                                            ["foo": "bar", "baz": "bam"]
                                        ]
                                    )
                                ]
                            ))
                        ]
                    )
                ]
            )
            """,
            Manifest(
                toolsVersion: .v5_5,
                package: Package(
                    name: "iOS App Test",
                    defaultLocalization: nil,
                    platforms: nil,
                    pkgConfig: nil,
                    products: [
                        Product(
                            name: "Dependency Test",
                            type: .iOSApplication,
                            targets: ["AppModule"],
                            settings: [
                                .displayVersion("1.0"),
                                .bundleVersion("1"),
                                .iOSAppInfo(
                                    ProductSetting.IOSAppInfo(
                                        iconAssetName: "AppIcon",
                                        accentColorAssetName: "AccentColor",
                                        supportedDeviceFamilies: [.pad, .phone],
                                        supportedInterfaceOrientations: [
                                            .portrait,
                                            .landscapeRight,
                                            .landscapeLeft,
                                            .portraitUpsideDown(.when(deviceFamilies: [.pad]))
                                        ],
                                        capabilities: [
                                            .camera(purposeString: "Need to see the face"),
                                            .appTransportSecurity(
                                                configuration: .init(
                                                    allowsArbitraryLoadsInWebContent: false,
                                                    allowsArbitraryLoadsForMedia: nil,
                                                    allowsLocalNetworking: nil,
                                                    exceptionDomains: [
                                                        .init(
                                                            domainName: "google.com",
                                                            includesSubdomains: true,
                                                            exceptionAllowsInsecureHTTPLoads: true,
                                                            exceptionMinimumTLSVersion: nil,
                                                            exceptionRequiresForwardSecrecy: nil,
                                                            requiresCertificateTransparency: nil
                                                        )
                                                    ],
                                                    pinnedDomains: [
                                                        .init(
                                                            domainName: "example.com",
                                                            includesSubdomains: nil,
                                                            pinnedCAIdentities: [
                                                                [
                                                                    "foo": "bar",
                                                                    "baz": "bam"
                                                                ]
                                                            ],
                                                            pinnedLeafIdentities: nil)
                                                    ]
                                                ),
                                                nil
                                            )
                                        ],
                                        additionalInfoPlistContentFilePath: nil
                                    )
                                )
                            ])
                    ],
                    dependencies: [],
                    targets: [],
                    cLanguageStandard: nil,
                    cxxLanguageStandard: nil
                )
            )
        )
    }

    func assertManifest(
        _ description: String,
        _ expected: Manifest,
        file: StaticString = #filePath,
        line: UInt = #line
    ) throws {
        // Write the description out to a temporary file
        let fileManager = FileManager.default
        let fileURL = fileManager.temporaryDirectory
            .appendingPathComponent("\(UUID().uuidString)-Package.swift")
        try description.write(to: fileURL, atomically: true, encoding: .utf8)

        // Cleanup the temporary file after the test
        addTeardownBlock {
            try? fileManager.removeItem(at: fileURL)
        }

        // Test each loader
        for loader in loaders {
            let loaderName = String(describing: type(of: loader))

            // Load the manifest, catch an error and fail if there was one
            let actual: Manifest
            do {
                actual = try loader.load(at: fileURL)
            } catch {
                XCTFail("\(loaderName) threw an error: \(error.localizedDescription)", file: file, line: line)
                return
            }

            // Perform a comparison
            if actual != expected {
                var actualDump = "", expectedDump = ""
                dump(actual, to: &actualDump)
                dump(expected, to: &expectedDump)

                let diff = diff(expected, actual).joined(separator: ", ")

                let message = """
                \(loaderName) produced differences:

                \(diff)
                """

                // TODO: Better diff
                XCTFail(message, file: file, line: line)
            }
        }
    }
}
